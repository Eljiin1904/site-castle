name: Castle Front-End CI

on:
  workflow_dispatch:
  push:
    branches:
      - main 
    paths:
      - "helm/site-frontend/**"
      - "packages/site-frontend/**"
      - ".github/workflows/deploy_fe.yml"

jobs:
  build-and-push-site-frontend:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: ${{ secrets.PIDWIN_READ_ONLY_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull latest Docker image
        run: |
          docker pull ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:latest || true

      - name: Set image tag
        id: set-image-tag
        run: |
          IMAGE_TAG="v1.0.$(date +%s)"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated IMAGE_TAG: $IMAGE_TAG"

      - name: Build Docker image using cache
        run: |
          IMAGE_TAG="${{ steps.set-image-tag.outputs.image_tag }}"
          docker build \
            --cache-from ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:latest \
            -t pidwin/castle-frontend \
            -f ./packages/shared-affiliate-api/Dockerfile .

          docker tag pidwin/castle-frontend:latest ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:$IMAGE_TAG
          docker tag pidwin/castle-frontend:latest ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:latest

      - name: Push Docker images to ECR
        run: |
          IMAGE_TAG="${{ steps.set-image-tag.outputs.image_tag }}"
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker push $REGISTRY/pidwin/castle-frontend:$IMAGE_TAG
          docker push $REGISTRY/pidwin/castle-frontend:latest

      - name: Output ECR Image URL
        run: |
          echo "Image pushed to ECR with tags:"
          echo "Version tag: ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:${{ steps.set-image-tag.outputs.image_tag }}"
          echo "Latest tag: ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:latest"

  update-argocd-dev:
    needs: build-and-push-site-frontend
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x /usr/local/bin/argocd
      - name: Update ArgoCD Application for DEV
        run: |
          argocd login ${{ secrets.ARGOCD_SERVER }} --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --insecure --grpc-web
          argocd app set castle-fe --helm-set image.app.tag=${{ needs.build-and-push-site-frontend.outputs.image_tag }}
          argocd app sync castle-fe --async