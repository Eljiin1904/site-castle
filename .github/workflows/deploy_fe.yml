name: Castle Front-End CI

on:
  workflow_dispatch:
  push:
    branches:
      - main 
    paths:
      - "packages/site-frontend/**"
      - ".github/workflows/deploy_fe.yml"

jobs:
  build-and-push-site-frontend:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: 'true'
          token: ${{ secrets.PIDWIN_READ_ONLY_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: set-image-tag
        run: |
          # Generate an immutable version tag (e.g. using a timestamp)
          IMAGE_TAG="v1.0.$(date +%s)"
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Generated IMAGE_TAG: $IMAGE_TAG"

      - name: Build and tag Docker image
        run: |
          IMAGE_TAG="${{ steps.set-image-tag.outputs.image_tag }}"
          # Build the Docker image from the frontend Dockerfile
          docker build -t pidwin/castle-frontend -f ./packages/site-frontend/Dockerfile .
          # Tag the image with the generated version tag
          docker tag pidwin/castle-frontend:latest ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:$IMAGE_TAG
          # Optionally, tag it as 'latest' for development or fallback purposes
          docker tag pidwin/castle-frontend:latest ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:latest

      - name: Push Docker images to ECR
        run: |
          IMAGE_TAG="${{ steps.set-image-tag.outputs.image_tag }}"
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          docker push $REGISTRY/pidwin/castle-frontend:$IMAGE_TAG
          docker push $REGISTRY/pidwin/castle-frontend:latest

      - name: Output ECR Image URL
        run: | 
          echo "Image pushed to ECR with tags:"
          echo "Version tag: ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:${{ steps.set-image-tag.outputs.image_tag }}"
          echo "Latest tag: ${{ steps.login-ecr.outputs.registry }}/pidwin/castle-frontend:latest"

  update-helm-chart-dev:
    needs: build-and-push-site-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Update Helm Chart for DEV
        run: |
          IMAGE_TAG="${{ needs.build-and-push-site-frontend.outputs.image_tag }}"
          echo "Updating DEV Helm chart with tag: $IMAGE_TAG"
          sed -i "s/tag: .*/tag: $IMAGE_TAG/" helm/site-frontend/values/dev/fe_values.yaml
          git add helm/site-frontend/values/dev/fe_values.yaml
          git commit -m "new_image_release: update DEV image tag to $IMAGE_TAG [skip ci]" || echo "No changes to commit"
          git push

  update-helm-chart-stage:
    needs: update-helm-chart-dev
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Update Helm Chart for STAGE
        run: |
          IMAGE_TAG="${{ needs.build-and-push-site-frontend.outputs.image_tag }}"
          echo "Updating STAGE Helm chart with tag: $IMAGE_TAG"
          sed -i "s/tag: .*/tag: $IMAGE_TAG/" helm/site-frontend/values/stage/fe_values.yaml
          git add helm/site-frontend/values/stage/fe_values.yaml
          git commit -m "new_image_release: update STAGE image tag to $IMAGE_TAG [skip ci]" || echo "No changes to commit"
          git push

  # wait-for-prod-approval:
  #   needs: update-helm-chart-stage
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: trstringer/manual-approval@v1
  #       with:
  #         secret: ${{ github.TOKEN }}
  #         approvers: csherida,civilizador
  #         minimum-approvals: 1
  #         issue-title: "Deploying to production"
  #         issue-body: "Please approve or deny the deployment of this version"
  #         exclude-workflow-initiator-as-approver: false
  #         fail-on-denial: true
  #         additional-approved-words: ''
  #         additional-denied-words: ''

  # update-helm-chart-prod:
  #   needs: wait-for-prod-approval
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3

  #     - name: Update Helm Chart for PROD
  #       run: |
  #         # For PROD, use the generated version tag for immutability and traceability
  #         IMAGE_TAG="${{ needs.build-and-push-site-frontend.outputs.image_tag }}"
  #         echo "Updating PROD Helm chart with tag: $IMAGE_TAG"
  #         sed -i "s/tag: .*/tag: $IMAGE_TAG/" helm/site-frontend/values/prod/fe_values.yaml
  #         git add helm/site-frontend/values/prod/fe_values.yaml
  #         git commit -m "new_image_release: update PROD image tag to $IMAGE_TAG [skip ci]" || echo "No changes to commit"
  #         git push
